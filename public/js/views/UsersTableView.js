// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['backbone', 'jquery', 'views/UsersRowView'], function(Backbone, $, UsersRow) {
  var UsersTableView;
  return UsersTableView = (function(superClass) {
    extend(UsersTableView, superClass);

    function UsersTableView() {
      return UsersTableView.__super__.constructor.apply(this, arguments);
    }

    UsersTableView.prototype._data = [];

    UsersTableView.prototype.tagName = 'table';

    UsersTableView.prototype.className = 'table users-table';

    UsersTableView.prototype.template = null;

    UsersTableView.prototype.iconUp = 'glyphicon-arrow-up';

    UsersTableView.prototype.iconDown = 'glyphicon-arrow-down';

    UsersTableView.prototype.events = {
      'click th': 'sortElements'
    };

    UsersTableView.prototype.initialize = function() {
      this.template = _.template($('#users-table').html());
      this.listenTo(this.collection, 'sort', this.updateData);
      return this.updateData();
    };

    UsersTableView.prototype.updateData = function() {
      var $table;
      $table = this.$('tbody');
      _.invoke(this._data, 'remove');
      return this._data = this.collection.map((function(_this) {
        return function(model) {
          var row;
          row = new UsersRow({
            model: _this.collection.get(model)
          });
          $table.append(row.render().$el);
          return row;
        };
      })(this));
    };

    UsersTableView.prototype.render = function() {
      this.$el.html(this.template());
      this.$('th div').append($('<span>', {
        "class": 'glyphicon'
      }));
      this.$('th[column="' + this.collection.sortAttribute + '"] span').addClass(this.iconUp);
      this.updateData();
      return this;
    };

    UsersTableView.prototype.sortElements = function(event) {
      var $el, cs, ns;
      $el = $(event.currentTarget);
      ns = $el.attr('column');
      cs = this.collection.sortAttribute;
      if (ns === cs) {
        this.collection.sortDirection *= -1;
      } else {
        this.collection.sortDirection = 1;
      }
      $el.closest('thead').find('span').attr('class', 'glyphicon');
      if (this.collection.sortDirection === 1) {
        $el.find('span').addClass(this.iconUp);
      } else {
        $el.find('span').addClass(this.iconDown);
      }
      this.collection.sortUsers(ns);
    };

    return UsersTableView;

  })(Backbone.View);
});
